#!/usr/bin/env python
import os
import sys
from platform import system
VERSION = "0.2"
APPNAME = "macALR"

# Check if the operating system is Darwin (macOS)
if system() != "Darwin":
    print(f"{APPNAME}: Fatal: {APPNAME} is made for macOS. {APPNAME} detected you are not running Darwin")
    exit(1)

# Check of input file specified
try:
    file_name = str(sys.argv[1])
except Exception:
    print(f"{APPNAME}: Fatal: No input file specified")
    exit()

if sys.argv[1] == "-h":
    print("\nIntroduction:")
    print("macALR is a shortcut/tool/script to make life easier for people getting into x86-64 assembly.\nIt quickly assembles, links and runs in one command")
    print("\nRunning the script:")
    print("To run macALR, type in 'macALR path/to/file.extension or file.extension'.\nTo check the version number, type in 'macALR -v'.\nTo access this help page, type in 'macALR -h'.\nThere are no other options or arguments that macALR accepts")
    print("\nDescription:")
    print("This program runs 'nasm' with the format set to macho64.\nThen it links the file using 'ld' and sets the minimum macosx version to 10.7.0.\nFinally it runs the program using './'.\nTo not clutter the directory, macALR deletes the generated object and executable files.")
    print("\nExample:")
    print("For this example, lets call the assembly file 'example.asm' with the path '~/assemblyPrograms/example.asm'.\nWe assume that we are currently in the home directory.\nRunning 'macALR example.asm' will not work as the file is not in the home directory.\nSo we can type the path in by typing 'macALR ~/assemblyPrograms/example.asm'.\nWe can also 'cd' into the 'assemblyPrograms' directory then type in 'macALR example.asm\n")
    exit(1)
elif sys.argv[1] == "-v":
	print(f"{APPNAME} version {VERSION}")
	exit(1)

# Check if input file can be found
if os.path.isfile(f"{file_name}") == False:
    print(f"{APPNAME}: Fatal: Input file cannot be found")
    exit(1)

# First run NASM then check if it worked
os.system(f"nasm -f macho64 {file_name} -o output.o")
if os.path.isfile("output.o") == False:
    print(f"{APPNAME}: Fatal: NASM assembling failed")
    exit(1)

# Next run ld then check if it worked
os.system(f"ld -macosx_version_min 10.7.0 -o output -no_pie output.o")
if os.path.isfile(file_name) == False:
    print(f"{APPNAME}: Fatal: ld linking failed")
    os.remove(f"output.o")
    exit(1)

# Lastly run the executable. We cannot check of it worked
os.system(f"./output")

# Deletes object and executable files after running.
os.remove("output")
os.remove("output.o")
